@model mediatori.Models.Test.TestClass
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Validation 01</title>
    <script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>

    <script type="text/javascript">
        function myValidate(idForm) {
            alert("validate " + idForm);

            //            $("#" + idForm).removeData("validator");
            //          $("#" + idForm).removeData("unobtrusiveValidation");
            //        $.validator.unobtrusive.parse("#" + idForm);
            //var validator =  $("#" + idForm).validate();


            //$('#' + idForm).validate().resetForm();
            //
            //validator.resetForm();
            var myForm = $('#' + idForm);

            myForm.validate().resetForm();

            //alert(myForm.id);

            // get validator object
            //var $validator = myForm.validate();

            //$form.validate().


            // get errors that were created using jQuery.validate.unobtrusive
            var $errors = $form.find(".field-validation-error span");

            // trick unobtrusive to think the elements were succesfully validated
            // this removes the validation messages
            //$errors.each(function () {
            //  $validator.settings.success($(this));
            //});

            // clear errors from validation
            $validator.resetForm();


        }
    </script>

</head>
<body>


    <p>Nel momento in cui clicco su submi, viene richiamato la validatio sui campi</p>
    @using (Html.BeginForm())
    {
        <input type="text" name="email" data-val="true" data-val-required="This field is required.">
        
        <div class="validation-summary-valid" data-valmsg-summary="true">
            <ul><li style="display:none"></li></ul>
        </div>
        <input type="submit" value="Submit" />
    }

    <hr />
    <p>Password  e conferma password</p>
    @using (Html.BeginForm("Validation01", "Test", FormMethod.Get, new { id = "MyForm01" }))
    {
        <div class="ui-field-contain">
            <label for="Password">Nuova password:</label>
            <input type="password" name="Password" id="Password" data-clear-btn="true" data-mini="true" required value="">
        </div>

        <div class="ui-field-contain">
            <label for="ConfirmPassword">Conferma la nuova password:</label>
            <input type="password" name="ConfirmPassword" id="ConfirmPassword" data-clear-btn="true" data-mini="true" required value=""
                   data-val="true" data-val-equalto="La password di conferma non corrisponde" data-val-equalto-other="*.Password">
            <span data-valmsg-replace="true" data-valmsg-for="ConfirmPassword" class="field-validation"></span>
            
        </div>

 
        <input type="submit" value="Submit" />
    }
    <hr />

    @using (Html.BeginForm("Validation01", "Test", FormMethod.Get, new { id = "MyForm02" }))
    {

        @Html.MyInputType(p => p.dataDiNascita)

        <label for="data02">Data 02</label>
        <input type="date" id="data02" name="data02" data-val="true" value="">
        <span class="field-validation-error" data-valmsg-for="data02" data-valmsg-replace="true"></span>

        <br />
        <label for="data03">Data 03</label>
        <input data-clear-btn="true" data-mini="true"
               data-role="date" data-val="true"
               data-val-date="The field Data inizio mandato must be a date."
               id="data03" name="data03" value="" type="date">
        <span class="field-validation-error" data-valmsg-for="data03" data-valmsg-replace="true"></span>

        <br />
        <label for="data04">Data 04</label>
        <input data-clear-btn="true" data-mini="true"
               data-role="date" data-val="true"
               data-val-date="The field Data inizio mandato must be a date."
               id="data04" name="data04" value="" type="date">
        <span class="field-validation-error" data-valmsg-for="data04" data-valmsg-replace="true"></span>

        <br />
        <div class="editor-control">
            <div class="editor-row">
                <div class="editor-label">
                    <label for="agenzia_dataInizioMandato">Data inizio mandato</label>
                </div>
                <div class="editor-value"><input class="input-validation-error" data-clear-btn="true" data-mini="true" data-role="date" data-val="true" data-val-date="The field Data inizio mandato must be a date." id="agenzia_dataInizioMandato" name="agenzia.dataInizioMandato" type="date" value="" /></div>
            </div><div class="editor-validation"><span class="field-validation-error" data-valmsg-for="agenzia.dataInizioMandato" data-valmsg-replace="true"> is an invalid date format</span></div>
        </div>

        <div class="editor-control">
            <div class="editor-row">
                <div class="editor-label"><label for="agenzia_dataFineMandato">Data fine mandato</label></div>
                <div class="editor-value"><input class="input-validation-error" data-clear-btn="true" data-mini="true" data-role="date" data-val="true" data-val-date="The field Data fine mandato must be a date." id="agenzia_dataFineMandato" name="agenzia.dataFineMandato" type="date" value="" /></div>
            </div><div class="editor-validation"><span class="field-validation-error" data-valmsg-for="agenzia.dataFineMandato" data-valmsg-replace="true"> is an invalid date format</span></div>
        </div>


        <br />

        <input type="submit" value="Submit" />

        <input type="button" value="Validate" onclick="myValidate('MyForm02');" />
    }



    <p>Email</p>
    @using (Html.BeginForm("Validation01", "Test", FormMethod.Get, new { id = "MyForm03" }))
    {
        <div class="ui-field-contain">
            <label for="email01">Input type email</label>
            <input type="email" name="email01" id="email01" data-clear-btn="true" data-mini="true" required value="">
            <span data-valmsg-replace="true" data-valmsg-for="email01" class="field-validation-valid"></span>
        </div>

        <div class="ui-field-contain">
            <label for="email02">Input type text</label>
            <input type="text" name="email02" id="email02" data-clear-btn="true" data-mini="true" required value=""
                   data-val="true" data-val-email="Indirizzo email non valido">
            <span data-valmsg-replace="true" data-valmsg-for="email02" class="field-validation-valid"></span>

        </div>


        <input type="submit" value="Submit" />
    }
    <hr />


    https://web.archive.org/web/20130919030425/http://denverdeveloper.wordpress.com/2012/09/26/some-things-ive-learned-about-jquery-unobtrusive-validation/

    To establish validation, we use the data- attributes on our <input> tags as follows:

    data-val=”true”	enable unobtrusive validation on this element (should be on every input element you want to validate)
    data-val-required=”ErrMsg”	makes the input required, and shows the ErrMsg
    data-val-length=”ErrMsg”
    data-val-length-min=”5”
    data-val-length-max=”15”	sets required string length and associated error message.
    data-val-number=”ErrMsg”	makes a field required to be a number.
    data-val-date=”ErrMsg”	requires a field to be a date (I do not recommend this, as it accepts too much – I prefer to use regex).
    data-val-equalto=”ErrMsg”
    data-val-equalto-other=”Fld”	requires one field to match the other (such as password confirm.  Fld is a jQuery selector
    data-val-regex=”ErrMsg”
    data-val-regex-pattern=”^regex$”	Requires the field to match the regex pattern.
    data-val-email=”ErrMsg”	requires a field to be a email (I do not recommend this, as it accepts too much – I prefer to use regex).
    data-val-url=”ErrMsg”	requires a field to be a url (I do not recommend this, as it accepts too much – I prefer to use regex).
 







</body>
</html>
